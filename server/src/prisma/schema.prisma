generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  RIAD
  FARM
  STUDIO
  DUPLEX
  TERRAIN
  LOCAL_COMMERCIAL
  BUREAU
  BUILDING
  ROOM
  HOTEL
}

enum OwnershipType {
  OWNER
  TENANT
  AGENT
  OTHER
}

enum PropertyFeature {
  POOL
  GARDEN
  SECURITY
  AIR_CONDITIONING
  WIFI
  TV
  BALCONY
  PARKING
  GARAGE
  WASHER
  ELEVATOR
  EQUIPPED_KITCHEN
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  googleId    String?
  githubId    String?
  firstName   String
  lastName    String
  username    String
  email       String     @unique
  phoneNumber String
  city        String
  country     String
  password    String
  avatar      String?
  createdAt   DateTime   @default(now())
  properties  Property[]
  reviews     Review[]
}

model Property {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  propertyType        PropertyType
  ownershipType       OwnershipType
  price               Float
  address             String?
  city                String?
  state               String?
  zipCode             String?
  country             String
  latitude            Float?
  longitude           Float?
  title               String
  description         String
  totalFloors         Int
  bedrooms            Int
  bathrooms           Int
  garages             Int
  squareMeters        Float
  yearBuilt           Int?
  features            PropertyFeature[]
  photos              PropertyPhoto[]
  owner               User              @relation(fields: [ownerId], references: [id])
  ownerId             String            @db.ObjectId
  reviews             Review[]
  averageRating       Float?

  @@index([ownerId])
}

model PropertyPhoto {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName     String
  originalName String
  path         String
  mimetype     String
  size         Int
  isMainPhoto  Boolean  @default(false)
  uploadedAt   DateTime @default(now())
  property     Property @relation(fields: [propertyId], references: [id])
  propertyId   String   @db.ObjectId

  @@index([propertyId])
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int      @default(0)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId

  @@unique([propertyId, userId])
  @@index([propertyId])
  @@index([userId])
}